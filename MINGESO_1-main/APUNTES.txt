     Docker:

base de datos:

Para ver volumen: docker volume ls
eliminar los volumen: docker volume prune
crea volumen :docker volume create <nombre>

En consola dentro de la carpeta:
hacer docker build -t 2pablo2/mingeso1 . (Si no hay una imagen con ese nombre se crea una)
luego docker push 2pablo2/mingeso1
(sin punto) (Para ver las imagenes es docker image ls)

Siempre que se haga una modificaci√≥n se hace un clean en maven
Y luego se hace un install.

Cuando ya tenemos el docker compose listo y todo los pasos anteriores listos
Se hace:
docker-compose up

Para detener primero por consola es ctrl + c

en el docker desktop a veces empiza a avanzar, para eso en la cmd
se pone docker-compose down 

Para que jenkins actualice no es necesario hacer un pull.


pipeline{
    agent any
    tools{
        maven "maven"
    }
    stages{
        stage("Build JAR File"){
            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/pablomunozramirez/MINGESO_1.git']])
                dir("PEP1MINGESO"){
                    bat "mvn clean install"
                }
            }
        }
        stage("Test"){
            steps{
                dir("PEP1MINGESO"){
                    bat "mvn test"
                }
            }
        }
        stage("Build Docker Image"){
            steps{
                dir("PEP1MINGESO"){
                    bat "docker build -t 2pablo2/mingeso1 ."
                }
            }
        }
        stage("Push Docker Image"){
            steps{
                dir("PEP1MINGESO"){
                    withCredentials([string(credentialsId: 'dckrhubpassword', variable: 'dckpass')]){
                        bat "docker login -u 2pablo2 -p ${dckpass}"
                        
                    }
                    bat "docker push 2pablo2/mingeso1"
                    
                }
                
            }
        }
    }
    post{
        always{
            dir("PEP1MINGESO"){
                bat "docker logout"
            }
        }
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
version: "3.5"
services:
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app1
      - app2
      - app3
  postgres-db:
    image: postgres
    restart: always
    volumes:
      - ./data/db:/var/lib/postgres
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: topeducation
    ports:
      - "5432:5432"

  app1:
    container_name: mingeso11
    image: 2pablo2/mingeso1
    ports:
      - "8091:8090"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/topeducation?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=1234
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres-db
  app2:
    container_name: mingeso12
    image: 2pablo2/mingeso1
    ports:
      - "8092:8090"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/topeducation?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=1234
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres-db
  app3:
    container_name: mingeso13
    image: 2pablo2/mingeso1
    ports:
      - "8093:8090"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/topeducation?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=1234
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres-db
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
upstream PEP1MINGESO {
    server mingeso11:8090;
    server mingeso12:8090;
    server mingeso13:8090;
}

server {
    listen 80;
    charset utf-8;
    access_log off;

    location / {
        proxy_pass http://PEP1MINGESO;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        access_log   off;
        expires      30d;

        alias /app/static;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

crear terraform, copiar el comando,
terraform apply


para conectar el servidor es con ssh root@(ipv4_address) /yes

para actualizar: sudo apt-get update y sudo apt-get upgrade

para instalar es: sudo apt install curl
Para el docker : sudo curl -fsSL https://get.docker.com -o get-docker.sh
Luego : sudo sh ./get-docker.sh DRY_RUN=1 -o-

Finalmen el docker-compose: sudo apt install docker-compose
Comando para ejecutar docker "guardar" docker:
sudo systemctl enable docker.service  //habilita el servicio
sudo systemctl start docker.service
Para comprobar : sudo systemctl status docker.service

Para crear el docker : vi docker-compose.yml
copiamos el dokcer que tenemos y lo pegamos, cambiamos la version
a 3.5.
:wq y enter, luego ls, para comprobar se pone cat docker-compose.yml

Ahora nginx:
mkdir nginx
cd nginx
mkdir conf.d
cd conf.d
vi PEP1MINGESO.conf / apretar a para editar
se copia el nginx
:wq

Luego antes de correr el docker:
docker-compose --compatibility up
docker-compose up
La ip esta en la pagian de digitalocean

exit en la consola
Cuando se termina // terraform destroy

primero: terraform apply
segundo : ssh root@(ipv4_address)  //dentro del server
INSTALAR
primero: sudo apt install curl
segundo: sudo curl -fsSL https://get.docker.com -o get-docker.sh
tercero: sudo sh ./get-docker.sh DRY_RUN=1 -o-
cuarto: sudo apt install docker-compose
quinto: sudo systemctl enable docker.service
sexto: sudo systemctl start docker.service
opcional: sudo systemctl status docker.service
vi docker-compose.yml //pegar docker 
ESC + :wq
     nginx:
primero: mkdir nginx
segundo: cd nginx
tercero: mkdir conf.d
cuarto:   cd conf.d
quinto :    vi PEP1MINGESO.conf / apretar a para editar
se copia el nginx
ESC + :wq

luego: cd /root

Para cambios:
1. push
2. jenkins build
3. meterte al sv
4. docker pull 2pablo2/mingeso1
5. docker compose up (te los actualiza)













